from sympy import mod_inverse as inverse
import sympy
from Crypto.Util.number import long_to_bytes

n = 14604881448308713448350666803528373599017512875445398735822568007696087332467574981142995135641847852478241296806067125480424970810632081557139962974608126


result = sympy.factorint(n)

print(result)

p = 2
q = 7302440724154356724175333401764186799508756437722699367911284003848043666233787490571497567820923926239120648403033562740212485405316040778569981487304063
f = (p - 1) * (q - 1)
print(f)

e = 65537
c = 3895367252996533554693645847789150421731464892945484482668988584562767419009464834645591988956600512295874270589048688768857558555483121398545388596618631

d = pow(e, -1, f)
print(d)

inverse_d = inverse(e, f)
print(inverse_d)

m = pow(c, d, n)
print(m)
print(long_to_bytes(m).decode())
